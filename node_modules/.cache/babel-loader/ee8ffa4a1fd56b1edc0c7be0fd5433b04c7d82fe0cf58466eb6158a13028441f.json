{"ast":null,"code":"var _jsxFileName = \"/Users/vladislav/dw2/frontend/src/CountryChart.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./getDataFromJson\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CountryFilmChart() {\n  _s();\n  const data = useFetch();\n  // Создаем объект, который будет хранить количество фильмов по странам\n  const countryCount = {};\n\n  // Подсчитываем количество фильмов для каждой страны\n  data.forEach(film => {\n    film[\"Country of Origin\"].forEach(country => {\n      if (countryCount[country]) {\n        countryCount[country] += 1;\n      } else {\n        countryCount[country] = 1;\n      }\n    });\n  });\n\n  // Преобразуем объект в массив для использования в recharts\n  const chartData = Object.keys(countryCount).map(country => ({\n    country,\n    count: countryCount[country]\n  }));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"count\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(CountryFilmChart, \"S4RoTPBxPgzJOsVvQj+jBOIDWlY=\", false, function () {\n  return [useFetch];\n});\n_c = CountryFilmChart;\nexport default CountryFilmChart;\nvar _c;\n$RefreshReg$(_c, \"CountryFilmChart\");","map":{"version":3,"names":["React","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","useFetch","jsxDEV","_jsxDEV","CountryFilmChart","_s","data","countryCount","forEach","film","country","chartData","Object","keys","map","count","width","height","children","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","fill","_c","$RefreshReg$"],"sources":["/Users/vladislav/dw2/frontend/src/CountryChart.jsx"],"sourcesContent":["import React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./getDataFromJson\";\n\nfunction CountryFilmChart() {\n    const data = useFetch();\n    // Создаем объект, который будет хранить количество фильмов по странам\n    const countryCount = {};\n\n    // Подсчитываем количество фильмов для каждой страны\n    data.forEach((film) => {\n        film[\"Country of Origin\"].forEach((country) => {\n            if (countryCount[country]) {\n                countryCount[country] += 1;\n            } else {\n                countryCount[country] = 1;\n            }\n        });\n    });\n\n    // Преобразуем объект в массив для использования в recharts\n    const chartData = Object.keys(countryCount).map((country) => ({\n        country,\n        count: countryCount[country],\n    }));\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"country\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default CountryFilmChart;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAC3G,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,IAAI,GAAGL,QAAQ,CAAC,CAAC;EACvB;EACA,MAAMM,YAAY,GAAG,CAAC,CAAC;;EAEvB;EACAD,IAAI,CAACE,OAAO,CAAEC,IAAI,IAAK;IACnBA,IAAI,CAAC,mBAAmB,CAAC,CAACD,OAAO,CAAEE,OAAO,IAAK;MAC3C,IAAIH,YAAY,CAACG,OAAO,CAAC,EAAE;QACvBH,YAAY,CAACG,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,MAAM;QACHH,YAAY,CAACG,OAAO,CAAC,GAAG,CAAC;MAC7B;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACO,GAAG,CAAEJ,OAAO,KAAM;IAC1DA,OAAO;IACPK,KAAK,EAAER,YAAY,CAACG,OAAO;EAC/B,CAAC,CAAC,CAAC;EAEH,oBACIP,OAAA,CAACH,mBAAmB;IAACgB,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAC,QAAA,eAC1Cf,OAAA,CAACV,QAAQ;MAACa,IAAI,EAAEK,SAAU;MAAAO,QAAA,gBACtBf,OAAA,CAACN,aAAa;QAACsB,eAAe,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvCpB,OAAA,CAACR,KAAK;QAAC6B,OAAO,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3BpB,OAAA,CAACP,KAAK;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACTpB,OAAA,CAACL,OAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACXpB,OAAA,CAACJ,MAAM;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVpB,OAAA,CAACT,GAAG;QAAC8B,OAAO,EAAC,OAAO;QAACC,IAAI,EAAC;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE9B;AAAClB,EAAA,CAlCQD,gBAAgB;EAAA,QACRH,QAAQ;AAAA;AAAAyB,EAAA,GADhBtB,gBAAgB;AAoCzB,eAAeA,gBAAgB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}