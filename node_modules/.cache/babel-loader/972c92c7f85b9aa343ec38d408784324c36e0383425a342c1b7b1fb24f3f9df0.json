{"ast":null,"code":"var _jsxFileName = \"/Users/vladislav/dw2/frontend/src/CountryChart.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./getDataFromJson\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CountryFilmChart() {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(); // Используем результат хука\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this); // Пока данные загружаются\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this); // Если ошибка\n  }\n\n  // Создаем объект для подсчета количества фильмов по странам\n  const countryCount = {};\n  data.forEach(film => {\n    if (Array.isArray(film[\"Country of Origin\"])) {\n      // Убедимся, что \"Country of Origin\" это массив\n      film[\"Country of Origin\"].forEach(country => {\n        if (countryCount[country]) {\n          countryCount[country] += 1;\n        } else {\n          countryCount[country] = 1;\n        }\n      });\n    }\n  });\n\n  // Преобразуем объект в массив для использования в recharts\n  const chartData = Object.keys(countryCount).map(country => ({\n    country,\n    count: countryCount[country]\n  }));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"count\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(CountryFilmChart, \"r14mJDRFIohEWG5JuFWBli83tkQ=\", false, function () {\n  return [useFetch];\n});\n_c = CountryFilmChart;\nexport default CountryFilmChart;\nvar _c;\n$RefreshReg$(_c, \"CountryFilmChart\");","map":{"version":3,"names":["React","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","useFetch","jsxDEV","_jsxDEV","CountryFilmChart","_s","data","loading","error","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","countryCount","forEach","film","Array","isArray","country","chartData","Object","keys","map","count","width","height","strokeDasharray","dataKey","fill","_c","$RefreshReg$"],"sources":["/Users/vladislav/dw2/frontend/src/CountryChart.jsx"],"sourcesContent":["import React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./getDataFromJson\";\n\nfunction CountryFilmChart() {\n    const { data, loading, error } = useFetch(); // Используем результат хука\n\n    if (loading) {\n        return <p>Загрузка данных...</p>; // Пока данные загружаются\n    }\n\n    if (error) {\n        return <p style={{ color: \"red\" }}>Ошибка: {error}</p>; // Если ошибка\n    }\n\n    // Создаем объект для подсчета количества фильмов по странам\n    const countryCount = {};\n\n    data.forEach((film) => {\n        if (Array.isArray(film[\"Country of Origin\"])) { // Убедимся, что \"Country of Origin\" это массив\n            film[\"Country of Origin\"].forEach((country) => {\n                if (countryCount[country]) {\n                    countryCount[country] += 1;\n                } else {\n                    countryCount[country] = 1;\n                }\n            });\n        }\n    });\n\n    // Преобразуем объект в массив для использования в recharts\n    const chartData = Object.keys(countryCount).map((country) => ({\n        country,\n        count: countryCount[country],\n    }));\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"country\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default CountryFilmChart;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAC3G,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE7C,IAAIM,OAAO,EAAE;IACT,oBAAOJ,OAAA;MAAAM,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EACtC;EAEA,IAAIL,KAAK,EAAE;IACP,oBAAOL,OAAA;MAAGW,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,GAAC,wCAAQ,EAACD,KAAK;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC,CAAC;EAC5D;;EAEA;EACA,MAAMG,YAAY,GAAG,CAAC,CAAC;EAEvBV,IAAI,CAACW,OAAO,CAAEC,IAAI,IAAK;IACnB,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE;MAAE;MAC5CA,IAAI,CAAC,mBAAmB,CAAC,CAACD,OAAO,CAAEI,OAAO,IAAK;QAC3C,IAAIL,YAAY,CAACK,OAAO,CAAC,EAAE;UACvBL,YAAY,CAACK,OAAO,CAAC,IAAI,CAAC;QAC9B,CAAC,MAAM;UACHL,YAAY,CAACK,OAAO,CAAC,GAAG,CAAC;QAC7B;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACR,YAAY,CAAC,CAACS,GAAG,CAAEJ,OAAO,KAAM;IAC1DA,OAAO;IACPK,KAAK,EAAEV,YAAY,CAACK,OAAO;EAC/B,CAAC,CAAC,CAAC;EAEH,oBACIlB,OAAA,CAACH,mBAAmB;IAAC2B,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAnB,QAAA,eAC1CN,OAAA,CAACV,QAAQ;MAACa,IAAI,EAAEgB,SAAU;MAAAb,QAAA,gBACtBN,OAAA,CAACN,aAAa;QAACgC,eAAe,EAAC;MAAK;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvCV,OAAA,CAACR,KAAK;QAACmC,OAAO,EAAC;MAAS;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3BV,OAAA,CAACP,KAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACTV,OAAA,CAACL,OAAO;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACXV,OAAA,CAACJ,MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVV,OAAA,CAACT,GAAG;QAACoC,OAAO,EAAC,OAAO;QAACC,IAAI,EAAC;MAAS;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE9B;AAACR,EAAA,CA5CQD,gBAAgB;EAAA,QACYH,QAAQ;AAAA;AAAA+B,EAAA,GADpC5B,gBAAgB;AA8CzB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}